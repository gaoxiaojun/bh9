#ifndef BAR_FACTORY_ITEM_H
#define BAR_FACTORY_ITEM_H

#include "event.h"

namespace h9 {

class BarFactory;

class BarFactoryItem {
public:
   explicit BarFactoryItem();
public:
    ProviderId pid() const { return m_pid; }
    InstrumentId iid() const { return m_iid; }

    const BarFactory* factory() const { return m_factory; }
    void set_factory(const BarFactory * f) const { m_factory = f; }
protected:
  void process(Event::Pointer e);
  virtual void on_data(Event::Pointer);
  virtual void on_reminder(ptime time);
  virtual ptime get_bar_open_time(Event::Pointer e);
  virtual ptime get_bar_close_time(Event::Pointer e);
  virtual ptime get_time(Event::Pointer e);
  bool add_reminder(ptime time);
  void emit_bar();



  friend bool operator==(const BarFactoryItem& lhs, const BarFactoryItem& rhs)
  {
      return lhs.m_type == rhs.m_type && lhs.m_size == rhs.m_size
              && lhs.m_input == rhs.m_input && lhs.m_pid == rhs.m_pid;
  }

private:
  mutable BarFactory* m_factory;
  ProviderId m_pid;
  InstrumentId m_iid;
  Bar::Type m_type;
  Bar::Input m_input;
  long m_size;
  bool m_session_enable;
};

class TimeBarFactoryItem : public BarFactoryItem {};

class TickBarFactoryItem : public BarFactoryItem {};

class RangeBarFactoryItem : public BarFactoryItem {};

class VolumeBarFactoryItem : public BarFactoryItem {};

class SessionBarFactoryItem : public BarFactoryItem {};

} // namespace h9

#endif // BAR_FACTORY_ITEM_H
